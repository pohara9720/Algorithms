*************************************
DATA STRUCTURES
*************************************


NOTE - Collections of values, the relationships between them and funcs or operations that can be applied to that DATA

SECTION Classes 
    1. A blueprint for creating objects with predefined properties and methods
    2. New objects are created by using constructor method
    3. Instance methods - methods provide functionality that pertains to single instance
    4. Class methods - Methods that are called without instantiating their class. Often used to create utility functions

SECTION Singly Linked Lists
    1. Data structure that contains a head, tail and length property
    2. Linked lists consists of nodes, and each node has a value and a pointer to another node or null
    3. There is no index
    4. Random access is not allowed
    5. Having no index makes it easier to insert and remove

SECTION Doubly Linked Lists
    1. Similar to Singly linked list except instead of just keeping track of next we also keep track of prev
    2. No indexes
    3. No random access
    4. Every node points to next and previous node or null (tail & head)
    5. These take up more memory than a Singly linked list

SECTION Stacks
    1. Data collection structure that follows LIFO (last in first out)
    2. The last element added to a stack will be the first element removed from the stack
    3. Commonly used for managing function invocations
    4. Undo and redo functionality
    5. Routing (history object is treated as a stack)
    6. Time complexity must be constant when writing stacks and methods

SECTION Queues
    1. Data collection structure that follows FIFO (first in first out)

SECTION Trees
    1. A data structure that consist of nodes in a parent/child relationships
    2. Trees on non-linear vs lists which are linear
    3. Root is top node in a tree
    4. Child- A node connected directly to another node moving away from the Root
    5. Parent - converse notion of a child
    6. Siblings - a group of nodes with the same parent
    7. Leaf - node with no children
    8. Edge - connection between nodes
    9. Lots of applications (html dom,ai,abtract syntax tree,network routing,folders in a os)
    10. ALOT of types of trees

SECTION Binary Trees
    1. Each node can at most have 2 children
    2. Every node to the left of the parent node is always less than the parent
    3. Every node to the right of the parent node is always greater than the parent
    4. It is very quick to search when sorted by the criteria above

SECTION Tree Traversal
    1. Means of visiting all nodes in a tree. Since it is non-linear this can be done multiple ways
    2. Breadth-First-Search - Working across the tree sideways to look for value (utilizes a queue)
        a. If you have a wide tree it could lead to alot more space complexity
        b. If you have a deep or long tree this is a better space complexity (BETTER)
    3. Depth-First-Search - Working down the tree to look for value (3 ways)
        a. Less space is taken up when you have a large wide tree (BETTER)
        b. More space when you have a deep or long tree

SECTION Heaps
    1. Type of tree
    2. Many types of Heaps
    3. Max Binary Heap - parents nodes are always LARGER than the children
    4. Min Binary Heap - parent nodes  are always SMALLER than the children
    5. Each parent has at most 2 nodes
    6. A binary heap is as compact as possible. Every left and right is filled before moving down
    7. Priority Queue - Retrieving item in heap based on p
    
SECTION Hash Table
    1. Used to store key value pairs
    2. They are like arrays but keys are not ordered
    3. Hash tables are FAST
    4. Hash functions 
        a. need to be fast! (constant time)
        b. outputs should be uniformly distributed
        c. Needs to be deterministic (same input -> same output)
        
SECTION Graphs
    1. A graph consists of a finite set of vertices or nodes or points
    2. Undirected graph - with a set of unordered pairs of these vertices (2 way connections/no direction associated)
    3. Directed graph - with a set of ordered pairs for a directed graph (direction associated with edge)
    4. Useful for 
        a. Social Networking
        b. Mapping
        c. Routing algos
        d. Visual Heirarchy
        e. File systems optimazations
    5. Vertex - a node of a graph
    6. Edge - connection between nodes
    7. Weighted/Unweighted - values assigned to distances between verticles (No values => unweighted / values => weighted)
    8. Directed/Undirected - directions assigned to distanced between vertices
    9. Traveral use cases
        a. Peer to peer networking 
        b. Web crawlers
        c. Finding 'closest' (matches/recommendations)
        d. Shortest path problem (GPS,Mazes,AI)
    10. Depth first traveral - Prioritzing visiting children instead of siblings
    11. Breadth first traversal - Prioritzing neighbors before visitng neighbors neighbors